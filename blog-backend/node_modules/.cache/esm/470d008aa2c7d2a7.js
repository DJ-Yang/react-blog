let Koa,Router,bodyParser,mongoose,api;_a2c‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_a2c‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_a2c‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_a2c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_a2c‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();







// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
.connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch(e => {
    _a2c‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

router.use('/api', api.routes());

app.use(bodyParser());

app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되어 잇지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port, () => {
  _a2c‍.g.console.log('Listening to port %d', port);
});